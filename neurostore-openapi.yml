openapi: 3.0.0
info:
  title: neurostore api
  version: '1.0'
  description: Create studysets for meta-analysis
  contact:
    name: James D Kent
    email: jamesdkent21@gmail.com
    url: 'https://github.com/jdkent'
servers:
  - url: 'http://localhost:80/api'
    description: testing
  - url: 'https://neurostore.org/api'
    description: production
paths:
  /studysets/:
    get:
      summary: GET a list of studysets
      tags:
        - studysets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-list'
      description: Get a list of studysets.
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/nested'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/unique'
        - $ref: '#/components/parameters/source'
        - $ref: '#/components/parameters/authors'
        - $ref: '#/components/parameters/user_id'
      security:
        - JSON-Web-Token: []
        - {}
    post:
      summary: POST/create a studyset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-return'
      tags:
        - studysets
      description: Create a studyset.
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studyset-request'
  '/studysets/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a studyset
      tags:
        - studysets
      responses:
        '200':
          description: studyset found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-return'
              examples: {}
        '404':
          $ref: '#/components/responses/404'
      description: Retrieve the information of a studyset with the matching studyset ID.
      parameters:
        - $ref: '#/components/parameters/nested'
    put:
      summary: PUT/update a studyset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-return'
        '422':
          $ref: '#/components/responses/422'
      description: Update a studyset.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studyset-request'
      tags:
        - studysets
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE a studyset
      responses:
        '200':
          description: OK
      description: delete a studyset
      security:
        - JSON-Web-Token: []
      tags:
        - studysets
  /studies/:
    get:
      summary: GET a list of studies
      tags:
        - studies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/study-list'
              examples: {}
      description: List studies
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/nested'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/unique'
        - $ref: '#/components/parameters/source'
        - $ref: '#/components/parameters/authors'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/data_type'
      security:
        - JSON-Web-Token: []
        - {}
    parameters: []
    post:
      summary: POST/create a study
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/study-return'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/study-request'
        description: ''
      tags:
        - studies
      description: Create a study
      security:
        - JSON-Web-Token: []
      parameters:
        - $ref: '#/components/parameters/source'
        - $ref: '#/components/parameters/source_id'
  '/studies/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a study
      tags:
        - studies
      responses:
        '200':
          description: Study Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/study-return'
              examples: {}
        '404':
          $ref: '#/components/responses/404'
      description: Get a study.
      parameters:
        - $ref: '#/components/parameters/nested'
    put:
      summary: PUT/update a study
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/study-return'
        '422':
          $ref: '#/components/responses/422'
      description: Update a study.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/study-request'
      tags:
        - studies
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE a study
      responses:
        '200':
          description: OK
      description: delete a study
      security:
        - JSON-Web-Token: []
      tags:
        - studies
  /analyses/:
    get:
      summary: GET list of analyses
      tags:
        - analyses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis-list'
              examples: {}
      description: List all analyses performed across studies.
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/nested'
    parameters: []
    post:
      summary: POST/create an analysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis-return'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analysis-request'
      tags:
        - analyses
      description: create an analysis
      parameters: []
      security:
        - JSON-Web-Token: []
  '/analyses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET an analysis
      tags:
        - analyses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis-return'
        '404':
          $ref: '#/components/responses/404'
      description: Information pertaining to a particular analysis within a study.
      parameters:
        - $ref: '#/components/parameters/nested'
    put:
      summary: PUT/update an analysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis-return'
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analysis-request'
      tags:
        - analyses
      description: Update an existing analysis.
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE an analysis
      responses:
        '200':
          description: OK
      description: delete an analysis
      security:
        - JSON-Web-Token: []
      tags:
        - analyses
  /points/:
    get:
      summary: Get Points
      tags:
        - points
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/point-list'
      description: list points in database
    post:
      summary: POST Points
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/point-return'
      tags:
        - points
      description: add a point to an analysis
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/point-request'
  '/points/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a point
      tags:
        - points
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/point-return'
              examples: {}
        '404':
          description: Not Found
      description: Information about a particular MRI coordinate
    put:
      summary: PUT/update a point
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/point-return'
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/point-request'
      tags:
        - points
      description: Update a particular MRI coordinate.
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE a point
      responses:
        '200':
          description: OK
      description: delete a point
      security:
        - JSON-Web-Token: []
      tags:
        - points
  /images/:
    get:
      summary: GET a list of images
      tags:
        - images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-list'
      description: Retrieve and list images.
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/analysis_name'
        - $ref: '#/components/parameters/value_type'
        - $ref: '#/components/parameters/space'
    post:
      summary: POST/create an image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-return'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image-request'
      tags:
        - images
      description: Create an image
      security:
        - JSON-Web-Token: []
  '/images/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET an image
      tags:
        - images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-return'
        '404':
          $ref: '#/components/responses/404'
      description: Retrieve information about a particular image from an analysis.
    put:
      summary: PUT/update an image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-return'
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image-request'
        description: ''
      tags:
        - images
      description: Update a specific image.
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE an image
      responses:
        '200':
          description: OK
      description: delete an image
      security:
        - JSON-Web-Token: []
      tags:
        - images
  /conditions/:
    get:
      summary: GET Conditions
      tags:
        - conditions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/condition-list'
      description: Get all conditions
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/description'
    post:
      summary: POST/Create a condition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/condition-return'
      description: Create a condition
      security:
        - JSON-Web-Token: []
      tags:
        - conditions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/condition-request'
  '/conditions/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a condition
      tags:
        - conditions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/condition-return'
        '404':
          $ref: '#/components/responses/404'
      description: 'Retrieve a condition (e.g., 2-back) that can be used in contrasts (e.g., 2-back - 1-back)'
    put:
      summary: PUT/update a condition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/condition-return'
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/condition-request'
        description: ''
      tags:
        - conditions
      description: update a condition
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE a condition
      responses:
        '200':
          description: OK
      description: delete a condition
      security:
        - JSON-Web-Token: []
      tags:
        - conditions
  /annotations/:
    parameters: []
    get:
      summary: Your GET endpoint
      tags:
        - annotations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-list'
      description: get annotations for an available studyset
      parameters:
        - $ref: '#/components/parameters/studyset_id'
    post:
      summary: Post Annotation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-return'
      description: Create an annotation
      security:
        - JSON-Web-Token: []
      tags:
        - annotations
      parameters:
        - $ref: '#/components/parameters/source'
        - $ref: '#/components/parameters/source_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/annotation-request'
  '/annotations/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - annotations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-return'
      description: get an individual annotation
      parameters:
        - $ref: '#/components/parameters/export'
    put:
      summary: Update an annotation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-return'
      description: edit an existing annotation
      tags:
        - annotations
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/annotation-request'
    delete:
      summary: DELETE an annotation
      responses:
        '200':
          description: OK
      description: delete annotation
      security:
        - JSON-Web-Token: []
      tags:
        - annotations
  /users/:
    get:
      summary: Your GET endpoint
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-list'
      description: get list of users
      security:
        - JSON-Web-Token: []
    post:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: create a user
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      tags:
        - user
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Individual User Profile
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: get an individual user
    put:
      summary: Update Individual Profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: update an individual user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      security:
        - JSON-Web-Token: []
      tags:
        - user
components:
  schemas:
    studyset-return:
      title: studyset-return
      description: ''
      x-examples: {}
      x-tags:
        - studyset
      allOf:
        - $ref: ./nimads/nimads/studysetBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/clone'
        - $ref: '#/components/schemas/studyset-relationships'
    studyset-request:
      title: studyset-request
      description: ''
      x-examples: {}
      x-tags:
        - studyset
      allOf:
        - $ref: ./nimads/nimads/studysetBase.yaml
        - $ref: '#/components/schemas/studyset-relationships'
    studyset-relationships:
      title: studyset-relationships
      x-stoplight:
        id: ted3fijjlxyhx
      type: object
      properties:
        studies:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/study-return'
              - $ref: '#/components/schemas/study-request'
              - type: string
                nullable: true
    studyset-list:
      title: studyset-get
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/studyset-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - studyset
    study-return:
      title: study-return
      allOf:
        - $ref: ./nimads/nimads/studyBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/clone'
        - $ref: '#/components/schemas/study-relationships'
      x-tags:
        - study
    study-request:
      title: study-request
      allOf:
        - $ref: ./nimads/nimads/studyBase.yaml
        - $ref: '#/components/schemas/study-relationships'
        - $ref: '#/components/schemas/nested-put-attributes'
      x-tags:
        - study
    study-relationships:
      title: study-relationships
      x-tags:
        - study
      type: object
      properties:
        analyses:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/analysis-return'
              - $ref: '#/components/schemas/analysis-request'
              - type: string
                nullable: true
    study-list:
      title: study-get
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/study-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - study
    analysis-return:
      title: analysis-return
      allOf:
        - $ref: ./nimads/nimads/analysisBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/analysis-relationships'
      x-tags:
        - analysis
    analysis-request:
      title: analysis-request
      allOf:
        - $ref: ./nimads/nimads/analysisBase.yaml
        - $ref: '#/components/schemas/analysis-relationships'
        - $ref: '#/components/schemas/nested-put-attributes'
      x-tags:
        - analysis
    analysis-relationships:
      title: analysis-relationships
      x-tags:
        - analysis
      type: object
      properties:
        study:
          type: string
        images:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/image-return'
              - $ref: '#/components/schemas/image-request'
              - type: string
                nullable: true
        points:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/point-return'
              - $ref: '#/components/schemas/point-request'
              - type: string
                nullable: true
        conditions:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/condition-return'
              - $ref: '#/components/schemas/condition-request'
              - type: string
                nullable: true
    analysis-list:
      title: analysis-list
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/metadata'
        results:
          type: array
          items:
            $ref: '#/components/schemas/analysis-return'
      x-tags:
        - analysis
    point-return:
      allOf:
        - $ref: ./nimads/nimads/pointBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/point-relationships'
      x-tags:
        - point
    point-request:
      allOf:
        - $ref: ./nimads/nimads/pointBase.yaml
        - $ref: '#/components/schemas/point-relationships'
        - $ref: '#/components/schemas/nested-put-attributes'
      x-tags:
        - point
    point-relationships:
      x-tags:
        - point
      type: object
      properties:
        image:
          type: string
          nullable: true
        value:
          oneOf:
            - $ref: '#/components/schemas/point-value'
            - type: string
              nullable: true
        x:
          type: number
          writeOnly: true
        'y':
          type: number
          writeOnly: true
        z:
          type: number
          writeOnly: true
        entities:
          type: array
          items:
            $ref: '#/components/schemas/entity'
    point-list:
      title: point-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/point-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - point
    point-value:
      title: point-value
      type: object
      properties:
        kind:
          type: string
          nullable: true
        value:
          type: number
          nullable: true
      description: ''
      x-tags:
        - point
    image-return:
      allOf:
        - $ref: ./nimads/nimads/imageBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/image-relationships'
      x-tags:
        - image
    image-request:
      allOf:
        - $ref: ./nimads/nimads/imageBase.yaml
        - $ref: '#/components/schemas/image-relationships'
        - $ref: '#/components/schemas/nested-put-attributes'
      x-tags:
        - image
    image-relationships:
      x-tags:
        - image
      type: object
      properties:
        analysis:
          type: string
        entities:
          type: array
          items:
            $ref: '#/components/schemas/entity'
        analysis_name:
          type: string
          nullable: true
      title: ''
    image-list:
      title: image-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/image-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - image
    condition-return:
      title: condition-return
      allOf:
        - $ref: ./nimads/nimads/conditionBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
      x-tags:
        - condition
    condition-request:
      title: condition-request
      allOf:
        - $ref: ./nimads/nimads/conditionBase.yaml
        - $ref: '#/components/schemas/nested-put-attributes'
      x-tags:
        - condition
    condition-list:
      title: condition-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/condition-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - condition
    annotation-return:
      title: annotation-return
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/annotation-export'
            - {}
        - allOf:
            - $ref: ./nimads/nimads/annotationBase.yaml
            - $ref: '#/components/schemas/resource-attributes'
            - $ref: '#/components/schemas/clone'
            - $ref: '#/components/schemas/annotation-relationships'
      x-tags:
        - annotation
    annotation-request:
      title: annotation-request
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/annotation-export'
            - {}
        - allOf:
            - $ref: ./nimads/nimads/annotationBase.yaml
            - $ref: '#/components/schemas/annotation-relationships'
            - $ref: '#/components/schemas/nested-put-attributes'
      x-tags:
        - annotation
    annotation-relationships:
      title: annotation-relationships
      x-tags:
        - annotation
      type: object
      properties:
        notes:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/note-collection-return'
              - $ref: '#/components/schemas/note-collection-request'
              - type: string
                nullable: true
    annotation-list:
      title: annotation-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/annotation-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - annotation
    note-collection-return:
      title: note-collection-return
      x-stoplight:
        id: fy0w02pre2yes
      allOf:
        - $ref: ./nimads/nimads/noteCollectionBase.yaml
        - type: object
          properties:
            analysis:
              type: string
            analysis_name:
              type: string
              nullable: true
            study:
              type: string
            study_name:
              type: string
              nullable: true
            annotation:
              type: string
            study_year:
              type: integer
              nullable: true
            publication:
              type: string
              nullable: true
            authors:
              type: string
              nullable: true
    note-collection-request:
      title: note-collection-request
      x-stoplight:
        id: fy0w02pre2yes
      allOf:
        - $ref: ./nimads/nimads/noteCollectionBase.yaml
        - $ref: '#/components/schemas/nested-put-attributes'
    annotation-export:
      type: object
      title: annotation-export
      additionalProperties: false
      x-tags:
        - annotation
      properties:
        metadata:
          type: object
          nullable: true
          readOnly: true
        annotation_csv:
          type: string
      required:
        - annotation_csv
    user:
      type: object
      title: user
      description: ''
      properties:
        name:
          type: string
          description: full name of user
        neuroid:
          type: string
      x-tags:
        - user
    user-list:
      title: user-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/user'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - user
    metadata:
      type: object
      title: metadata
      description: data included in every list response
      additionalProperties: false
      properties:
        total_count:
          type: integer
          description: |
            total number of entries
          readOnly: true
        unique_count:
          type: integer
          description: count of elements for unique entries
          readOnly: true
      x-internal: true
      x-tags:
        - support
    resource-attributes:
      title: resource-attributes
      type: object
      description: common resource attributes
      x-internal: true
      x-tags:
        - support
      properties:
        id:
          type: string
          description: short UUID specifying the location of this resource
          example: 38jobTomPDqt
          minLength: 12
          maxLength: 12
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: '2021-01-16T20:50:38.009318+00:00'
          description: time the resource was created on the database
          readOnly: true
        updated_at:
          type: string
          nullable: true
          readOnly: true
        user:
          type: string
          description: who owns the resource
          nullable: true
          readOnly: true
        public:
          type: boolean
          default: true
      required:
        - id
    json-ld:
      title: json-ld
      type: object
      description: JSON-LD elements for data tracking
      properties:
        '@context':
          type: object
          description: Context for the shorthand names
          properties:
            '@vocab':
              type: string
              description: common URI prefix for @type
              format: uri
        '@id':
          type: string
          format: uri
          description: URI of the resource
        '@type':
          type: string
          description: One of the NiMADS data types
          example: Study
      x-internal: true
      x-tags:
        - support
    entity:
      title: entity
      description: 'descriptor of level of analysis for a particular image/point (run, session, subject, group, meta)'
      allOf:
        - type: object
          properties:
            label:
              type: string
            level:
              type: string
              enum:
                - run
                - session
                - subject
                - group
                - meta
            analysis:
              type: string
        - $ref: '#/components/schemas/resource-attributes'
    clone:
      title: clone
      x-stoplight:
        id: x93bgkqihq25v
      type: object
      properties:
        source:
          type: string
          nullable: true
        source_id:
          type: string
          nullable: true
        source_updated_at:
          type: string
          nullable: true
          readOnly: true
    nested-put-attributes:
      type: object
      title: nested-put-attributes
      x-stoplight:
        id: 9mprupprwm2sr
      additionalProperties: false
      properties:
        id:
          type: string
      writeOnly: true
  responses:
    '404':
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: '"The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again."'
              status:
                type: integer
                enum:
                  - 404
              title:
                type: string
                example: '"Not Found"'
              type:
                type: string
                example: '"about:blank"'
    '422':
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: The request was well-formed but was unable to be followed due to semantic errors.
              status:
                type: integer
              title:
                type: string
                example: Unprocessable Entity
              type:
                type: string
                example: 'about:blank'
  parameters:
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
        minLength: 1
        example: imagin
      description: search for entries that contain the substring
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: string
        default: created_at
      description: Parameter to sort results on
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
      description: page of results
    desc:
      name: desc
      in: query
      required: false
      schema:
        type: boolean
      description: sort results by descending order (as opposed to ascending order)
    page_size:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        maximum: 100
        exclusiveMaximum: true
        minimum: 1
        format: int32
      description: number of results to show on a page
    nested:
      name: nested
      in: query
      required: false
      schema:
        type: boolean
      description: whether to show the URI to a resource (false) or to embed the object in the response (true)
    source:
      name: source
      in: query
      required: false
      schema:
        type: string
        example: neurostore
        default: neurostore
        enum:
          - neurostore
          - neurovault
          - pubmed
          - neurosynth
          - neuroquery
      description: the source of the resource you would like to filter/copy from
    source_id:
      name: source_id
      in: query
      schema:
        type: string
        example: 1234567890ab
      description: id of the resource you are either filtering/copying on
    name:
      name: name
      in: query
      required: false
      schema:
        type: string
      description: search the name field for a term
    description:
      name: description
      in: query
      required: false
      schema:
        type: string
      description: search description field for a term
    filename:
      name: filename
      in: query
      required: false
      schema:
        type: string
      description: search filename field
    space:
      name: space
      in: query
      schema:
        type: string
      description: search space field
    value_type:
      name: value_type
      in: query
      required: false
      schema:
        type: string
      description: search value_type field
    analysis_name:
      name: analysis_name
      in: query
      required: false
      schema:
        type: string
      description: search analysis_name field
    unique:
      name: unique
      in: query
      required: false
      schema:
        type: boolean
      description: whether to list clones with originals
    authors:
      name: authors
      in: query
      required: false
      schema:
        type: string
      description: search authors
    user_id:
      name: user_id
      in: query
      required: false
      schema:
        type: string
      description: user id you want to filter by
    studyset_id:
      name: studyset_id
      in: query
      required: false
      schema:
        type: string
      description: see all annotations connected to this studyset
    export:
      name: export
      in: query
      required: false
      schema:
        type: boolean
      description: return endpoint data in consumable/readable format
    data_type:
      name: data_type
      in: query
      required: false
      schema:
        type: string
        enum:
          - coordinate
          - image
          - both
      description: 'whether searching for studies that contain coordinates, images, or both'
  securitySchemes:
    JSON-Web-Token:
      type: http
      scheme: bearer
      description: authentication method
tags:
  - name: analyses
  - name: studysets
  - name: images
  - name: points
  - name: studies
  - name: conditions
  - name: user
  - name: annotations
