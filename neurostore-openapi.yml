openapi: 3.0.0
info:
  title: neurostore api
  version: '1.0'
  description: Create datasets for meta-analysis
  contact:
    name: James D Kent
    email: jamesdkent21@gmail.com
    url: 'https://github.com/jdkent'
servers:
  - url: 'http://localhost:80/api'
    description: James D Kent
paths:
  '/datasets/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a dataset
      tags:
        - datasets
      responses:
        '200':
          description: Dataset found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/dataset'
                  - $ref: '#/components/schemas/read-only'
              examples: {}
        '404':
          $ref: '#/components/responses/404'
      description: Retrieve the information of a dataset with the matching dataset ID.
      parameters: []
    put:
      summary: PUT/update a dataset
      responses:
        '200':
          description: OK
        '422':
          $ref: '#/components/responses/422'
      description: Update a dataset.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataset'
      tags:
        - datasets
  '/studies/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a study
      tags:
        - studies
      responses:
        '200':
          description: Study Found
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/study'
                  - $ref: '#/components/schemas/read-only'
              examples: {}
        '404':
          $ref: '#/components/responses/404'
      description: Get a study.
      parameters:
        - $ref: '#/components/parameters/nested'
    put:
      summary: PUT/update a study
      responses:
        '200':
          description: OK
        '422':
          $ref: '#/components/responses/422'
      description: Update a study.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/study'
      tags:
        - studies
      security:
        - JSON-Web-Token: []
  /studies/:
    get:
      summary: GET a list of studies
      tags:
        - studies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/study'
                    - $ref: '#/components/schemas/read-only'
              examples: {}
      description: List studies
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/nested'
    parameters: []
    post:
      summary: POST/create a study
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/study'
      tags:
        - studies
      description: Create a study
  /analyses/:
    get:
      summary: GET list of analyses
      tags:
        - analyses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/analysis'
                    - $ref: '#/components/schemas/read-only'
      description: List all analyses performed across studies.
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
    parameters: []
    post:
      summary: POST/create an analysis
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/analysis'
      tags:
        - analyses
      description: create an analysis
      parameters: []
  '/analyses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET an analysis
      tags:
        - analyses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/analysis'
                  - $ref: '#/components/schemas/read-only'
        '404':
          $ref: '#/components/responses/404'
      description: Information pertaining to a particular analysis within a study.
      parameters:
        - $ref: '#/components/parameters/nested'
    put:
      summary: PUT/update an analysis
      responses:
        '200':
          description: OK
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analysis'
      tags:
        - analyses
      description: Update an existing analysis.
  '/points/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a point
      tags:
        - points
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/point'
                  - $ref: '#/components/schemas/read-only'
              examples: {}
        '404':
          description: Not Found
      description: Information about a particular MRI coordinate
    put:
      summary: PUT/update a point
      responses:
        '200':
          description: OK
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/point'
      tags:
        - points
      description: Update a particular MRI coordinate.
  '/images/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET an image
      tags:
        - images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/image'
                  - $ref: '#/components/schemas/read-only'
        '404':
          $ref: '#/components/responses/404'
      description: Retrieve information about a particular image from an analysis.
    put:
      summary: PUT/update an image
      responses:
        '200':
          description: OK
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image'
        description: ''
      tags:
        - images
      description: Update a specific image.
  /images/:
    get:
      summary: GET a list of images
      tags:
        - images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/image'
                    - $ref: '#/components/schemas/read-only'
      description: Retrieve and list images.
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
    post:
      summary: POST/create an image
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/image'
      tags:
        - images
      description: Create an image
  '/conditions/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a condition
      tags:
        - conditions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/condition'
                  - $ref: '#/components/schemas/read-only'
        '404':
          $ref: '#/components/responses/404'
      description: 'Retrieve a condition (e.g., 2-back) that can be used in contrasts (e.g., 2-back - 1-back)'
    put:
      summary: PUT/update a condition
      responses:
        '200':
          description: OK
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/condition'
        description: ''
      tags:
        - conditions
      description: update a condition
  /datasets/:
    get:
      summary: GET a list of datasets
      tags:
        - datasets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: '#/components/schemas/dataset'
                    - $ref: '#/components/schemas/read-only'
      description: Get a list of datasets.
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
    post:
      summary: POST/create a dataset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataset'
      tags:
        - datasets
      description: Create a dataset.
  /login:
    post:
      summary: Login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: login with username and password
      tags:
        - user
  /register:
    post:
      summary: Register Account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: Create an account.
      tags:
        - user
components:
  schemas:
    dataset:
      title: dataset
      type: object
      description: ''
      x-examples: {}
      properties:
        name:
          type: string
          description: ''
          nullable: true
        description:
          type: string
          nullable: true
        publication:
          type: string
          nullable: true
        doi:
          type: string
          nullable: true
        pmid:
          type: string
          nullable: true
        nimads_data:
          description: ''
          type: object
          properties:
            dataset:
              type: array
              items:
                $ref: '#/components/schemas/study'
        user:
          type: string
          nullable: true
          readOnly: true
      required:
        - name
        - nimads_data
    study:
      description: elements of a study/published paper
      type: object
      title: study
      x-examples: {}
      properties:
        analysis:
          anyOf:
            - description: id of the analysis (when nested=false)
              items:
                type: string
            - description: analyses representations (for PUT/POST)
              items:
                $ref: '#/components/schemas/analysis'
            - items:
                allOf:
                  - $ref: '#/components/schemas/analysis'
                  - $ref: '#/components/schemas/read-only'
                description: representation of Analysis from GET (when nested=true)
          description: Representations of Analyses associated with the study
          type: array
        doi:
          type: string
          nullable: true
          example: 10.1016/S0926-6410(97)00020-7
          description: digital object identifier of the study
        name:
          type: string
          nullable: true
          example: 'Functional magnetic resonance imaging of category-specific cortical activation: evidence for semantic maps.'
          description: title of the study
        metadata:
          description: other metadata associated with the study
          type: object
          nullable: true
        description:
          type: string
          nullable: true
        publication:
          type: string
          nullable: true
        pmid:
          type: string
          nullable: true
    analysis:
      title: analysis
      type: object
      x-examples: {}
      description: ''
      properties:
        condition:
          anyOf:
            - type: array
              description: GET when nested=false
              items:
                type: string
            - type: array
              description: for PUT/POST
              items:
                $ref: '#/components/schemas/condition'
            - allOf:
                - $ref: '#/components/schemas/condition'
                - $ref: '#/components/schemas/read-only'
          description: 'array of conditions (e.g., 2-back, memory, etc.) that must be the same length as weight.'
        image:
          anyOf:
            - items:
                type: string
                minLength: 12
                maxLength: 12
                example: 38jobTomPDqt
            - items:
                $ref: '#/components/schemas/image'
          description: URL(s) pointing towards image endpoints
          type: array
        name:
          type: string
          example: '"20356"'
          nullable: true
        point:
          anyOf:
            - items:
                type: string
                minLength: 12
                maxLength: 12
                example: 38jobTomPDqt
            - items:
                $ref: '#/components/schemas/point'
          type: array
        weight:
          type: array
          description: 'weight applied to each condition, must be the same length as condition'
          items:
            type: number
        description:
          type: string
          nullable: true
        study:
          type: string
          example: 38jobTomPDqt
          minLength: 12
          maxLength: 12
          readOnly: true
    point:
      title: point
      type: object
      x-examples: {}
      description: a coordinate in the brain
      properties:
        coordinates:
          type: array
          minItems: 3
          maxItems: 3
          description: location of the point
          items:
            type: number
            format: float
            example: 63
        space:
          type: string
          example: UNKNOWN
          description: template space used to determine coordinate
        kind:
          type: string
          description: I do not know what this is supposed to represent?
          nullable: true
        image:
          type: string
          nullable: true
        label_id:
          type: string
          nullable: true
        x:
          type: number
          writeOnly: true
        'y':
          type: number
          writeOnly: true
        z:
          type: number
          writeOnly: true
        value:
          type: array
          items:
            type: number
        analysis:
          type: string
          example: 6kwPw6p79Ljm
          minLength: 12
          maxLength: 12
          readOnly: true
    image:
      title: image
      type: object
      description: representation of a statistical brain image
      x-examples: {}
      properties:
        metadata:
          type: object
          nullable: true
          description: metadata from image
        url:
          type: string
          nullable: true
          format: uri
          example: 'https://neurovault.org/media/images/4778/Positive_RPEs_zstat.nii.gz'
          description: URL to image file
        filename:
          type: string
          nullable: true
          example: Positive_RPEs_zstat.nii.gz
          description: name of the image file
        space:
          type: string
          nullable: true
          example: TAL
          description: the template space the image is in
        value_type:
          type: string
          nullable: true
          example: Z
          description: The values the image represents
        analysis_name:
          type: string
          nullable: true
          example: Positive RPEs
          description: name of the analysis
          readOnly: true
        analysis:
          type: string
          example: 7UvrsaALJU9g
          description: ID of the analysis this image came from
          minLength: 12
          maxLength: 12
          readOnly: true
        add_date:
          type: string
          format: date-time
          description: date the image was added
          readOnly: true
    condition:
      title: condition
      type: object
      x-examples: {}
      description: ''
      properties:
        name:
          type: string
          nullable: true
          description: condition name
        description:
          type: string
          nullable: true
          description: condition description
    json-ld:
      title: json-ld
      type: object
      description: JSON-LD elements for data tracking
      properties:
        '@context':
          type: object
          description: Context for the shorthand names
          properties:
            '@vocab':
              type: string
              description: common URI prefix for @type
              format: uri
        '@id':
          type: string
          format: uri
          description: URI of the resource
        '@type':
          type: string
          description: One of the NiMADS data types
          example: Study
    read-only:
      title: read-only
      type: object
      description: common read-only attributes
      properties:
        id:
          type: string
          description: short UUID specifying the location of this resource
          example: 38jobTomPDqt
          minLength: 12
          maxLength: 12
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: '2021-01-16T20:50:38.009318+00:00'
          description: time the resource was created on the database
          readOnly: true
    point-value:
      title: point-value
      type: object
      properties:
        kind:
          type: string
          nullable: true
        value:
          type: number
          nullable: true
    user:
      title: user
      type: object
      description: ''
      properties:
        email:
          type: string
          format: email
        name:
          type: string
          description: full name of user
        username:
          type: string
          readOnly: true
        password:
          type: string
          writeOnly: true
        access_token:
          type: string
          description: JWT
          readOnly: true
  responses:
    '404':
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: '"The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again."'
              status:
                type: integer
                enum:
                  - 404
              title:
                type: string
                example: '"Not Found"'
              type:
                type: string
                example: '"about:blank"'
    '422':
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: The request was well-formed but was unable to be followed due to semantic errors.
              status:
                type: integer
              title:
                type: string
                example: Unprocessable Entity
              type:
                type: string
                example: 'about:blank'
  parameters:
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
        minLength: 1
        example: imagin
      description: search for entries that contain the substring
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: string
        default: created_at
      description: Parameter to sort results on
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
      description: page of results
    desc:
      name: desc
      in: query
      required: false
      schema:
        type: boolean
      description: sort results by descending order (as opposed to ascending order)
    page_size:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        maximum: 100
        exclusiveMaximum: true
        minimum: 1
        format: int32
      description: number of results to show on a page
    nested:
      name: nested
      in: query
      required: false
      schema:
        type: boolean
      description: whether to show the URI to a resource (false) or to embed the object in the response (true)
  securitySchemes:
    JSON-Web-Token:
      type: http
      scheme: bearer
      description: ''
tags:
  - name: analyses
  - name: datasets
  - name: images
  - name: points
  - name: studies
  - name: conditions
  - name: user
