openapi: 3.0.0
info:
  title: neurostore api
  version: '1.0'
  description: Create studysets for meta-analysis
  contact:
    name: James D Kent
    email: jamesdkent21@gmail.com
    url: 'https://github.com/jdkent'
servers:
  - url: 'https://neurostore.org/api'
    description: production
  - url: 'http://localhost:80/api'
    description: testing
paths:
  /pipelines/:
    get:
      summary: GET a list of pipelines
      tags:
        - pipelines
      parameters:
        - $ref: '#/components/parameters/paginate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pipeline-list'
    post:
      summary: POST/create a pipeline
      tags:
        - pipelines
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipeline'
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized - Authentication required
  /pipelines/{id}:
    get:
      summary: GET a pipeline by ID
      tags:
        - pipelines
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pipeline'
    put:
      summary: PUT/update a pipeline by ID
      tags:
        - pipelines
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipeline'
      responses:
        '200':
          description: OK
    delete:
      summary: DELETE a pipeline by ID
      tags:
        - pipelines
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  /pipeline-configs/:
    get:
      summary: GET a list of pipeline configs
      tags:
        - pipeline-configs
      parameters:
        - name: pipeline
          in: query
          description: Filter configs by pipeline name
          required: false
          schema:
            type: array
            items:
              type: string
              example: 'TestPipeline'
        - $ref: '#/components/parameters/paginate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pipeline-config-list'
    post:
      summary: POST/create a pipeline config
      tags:
        - pipeline-configs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipeline-config'
      responses:
        '201':
          description: Created
  /pipeline-configs/{id}:
    get:
      summary: GET a pipeline config by ID
      tags:
        - pipeline-configs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pipeline-config'
    put:
      summary: PUT/update a pipeline config by ID
      tags:
        - pipeline-configs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipeline-config'
      responses:
        '200':
          description: OK
    delete:
      summary: DELETE a pipeline config by ID
      tags:
        - pipeline-configs
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
    
  /pipeline-study-results/:
    get:
      summary: GET a list of pipeline run results
      tags:
        - pipeline-study-results
      parameters:
        - $ref: '#/components/parameters/paginate'
        - name: feature_filter
          in: query
          description: >
            Filter results by feature content. Format: "PipelineName[:version]:field_path=value".
            Examples:
              - "TestPipeline:1.0.0:groups.diagnosis=ADHD" (specific version)
              - "TestPipeline:groups.diagnosis=ADHD" (latest version)
            
            Field path supports array notation with [], regex search with ~, and comparisons with =, >, <, >=, <=.
          required: false
          schema:
            type: array
            items:
              type: string
              example: 'TestPipeline:1.0.0:groups.diagnosis=ADHD'
        - name: feature_flatten
          in: query
          required: false
          schema:
            type: boolean
        - name: pipeline_config
          in: query
          description: >
            Filter results by pipeline config content. Format: "PipelineName[:version]:config_path=value".
            Examples:
              - "TestPipeline:1.0.0:preprocessing.smoothing=8" (specific version)
              - "TestPipeline:model.type=linear" (latest version)
            
            Config path supports array notation with [], regex search with ~, and comparisons with =, >, <, >=, <=.
          required: false
          schema:
            type: array
            items:
              type: string
              example: 'TestPipeline:1.0.0:preprocessing.smoothing=8'
        - name: feature_display
          in: query
          description: >
            Filter results by pipeline name and optionally version. Format: "pipeline_name[:version]".
            Examples:
              - "TestPipeline" (all results from pipeline)
              - "TestPipeline:1.0.0" (results from specific version)
            Multiple values can be provided to get results from multiple pipelines/versions.
          required: false
          schema:
            type: array
            items:
              type: string
              example: 'TestPipeline:1.0.0'
        - name: study_id
          in: query
          description: Filter results by base study ID
          required: false
          schema:
            type: array
            items:
              type: string
        - name: version
          in: query
          description: Filter results by pipeline config version
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pipeline-study-result-list'
    post:
      summary: POST/create a pipeline run result
      tags:
        - pipeline-study-results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipeline-study-result'
      responses:
        '201':
          description: Created
  /pipeline-study-results/{pipeline_study_result_id}:
    get:
      summary: GET a pipeline run result by ID
      tags:
        - pipeline-study-results
      parameters:
        - name: pipeline_study_result_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pipeline-study-result'
    put:
      summary: PUT/update a pipeline run result by ID
      tags:
        - pipeline-study-results
      parameters:
        - name: pipeline_study_result_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pipeline-study-result'
      responses:
        '200':
          description: OK
    delete:
      summary: DELETE a pipeline run result by ID
      tags:
        - pipeline-study-results
      parameters:
        - name: pipeline_study_result_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
  /studysets/:
   get:
     summary: GET a list of studysets
     tags:
       - studysets
     responses:
       '200':
         description: OK
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/studyset-list'
     description: Get a list of studysets.
     parameters:
       - $ref: '#/components/parameters/search'
       - $ref: '#/components/parameters/sort'
       - $ref: '#/components/parameters/page'
       - $ref: '#/components/parameters/desc'
       - $ref: '#/components/parameters/page_size'
       - $ref: '#/components/parameters/paginate'
       - $ref: '#/components/parameters/nested'
       - $ref: '#/components/parameters/name'
       - $ref: '#/components/parameters/description'
       - $ref: '#/components/parameters/source_id'
       - $ref: '#/components/parameters/unique'
       - $ref: '#/components/parameters/source'
       - $ref: '#/components/parameters/authors'
       - $ref: '#/components/parameters/user_id'
     security:
        - JSON-Web-Token: []
        - {}
   post:
      summary: POST/create a studyset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-return'
      tags:
        - store
        - studysets
      description: Create a studyset.
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studyset-request'
  '/studysets/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a studyset
      tags:
        - store
        - studysets
      responses:
        '200':
          description: studyset found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-return'
              examples: {}
            application/gzip:
              schema:
                type: object
                properties: {}
        '404':
          $ref: '#/components/responses/404'
      description: Retrieve the information of a studyset with the matching studyset ID.
      parameters:
        - $ref: '#/components/parameters/nested'
        - $ref: '#/components/parameters/gzip'
    put:
      summary: PUT/update a studyset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-return'
        '422':
          $ref: '#/components/responses/422'
      description: Update a studyset.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studyset-request'
      tags:
        - store
        - studysets
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE a studyset
      responses:
        '200':
          description: OK
      description: delete a studyset
      security:
        - JSON-Web-Token: []
      tags:
        - store
        - studysets
  /studies/:
    get:
      summary: GET a list of studies
      tags:
        - store
        - studies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/study-list'
              examples: {}
      description: List studies
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/paginate'
        - $ref: '#/components/parameters/nested'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/source_id'
        - $ref: '#/components/parameters/unique'
        - $ref: '#/components/parameters/source'
        - $ref: '#/components/parameters/authors'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/data_type'
        - $ref: '#/components/parameters/studyset_owner'
        - $ref: '#/components/parameters/level'
        - $ref: '#/components/parameters/pmid'
        - $ref: '#/components/parameters/doi'
        - $ref: '#/components/parameters/flat'
      security:
        - JSON-Web-Token: []
        - {}
    parameters: []
    post:
      summary: POST/create a study
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/study-return'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/study-request'
        description: ''
      tags:
        - store
        - studies
      description: Create a study
      security:
        - JSON-Web-Token: []
      parameters:
        - $ref: '#/components/parameters/source'
        - $ref: '#/components/parameters/source_id'
  '/studies/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a study
      tags:
        - store
        - studies
      responses:
        '200':
          description: Study Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/study-return'
              examples: {}
        '404':
          $ref: '#/components/responses/404'
      description: Get a study.
      parameters:
        - $ref: '#/components/parameters/nested'
        - $ref: '#/components/parameters/studyset_owner'
        - $ref: '#/components/parameters/flat'
    put:
      summary: PUT/update a study
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/study-return'
        '422':
          $ref: '#/components/responses/422'
      description: Update a study.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/study-request'
      tags:
        - store
        - studies
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE a study
      responses:
        '200':
          description: OK
      description: delete a study
      security:
        - JSON-Web-Token: []
      tags:
        - store
        - studies
  /analyses/:
    get:
      summary: GET list of analyses
      tags:
        - analyses
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis-list'
              examples: {}
      description: List all analyses performed across studies.
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/paginate'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/nested'
    parameters: []
    post:
      summary: POST/create an analysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis-return'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analysis-request'
      tags:
        - analyses
        - store
      description: create an analysis
      parameters: []
      security:
        - JSON-Web-Token: []
  '/analyses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET an analysis
      tags:
        - analyses
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis-return'
        '404':
          $ref: '#/components/responses/404'
      description: Information pertaining to a particular analysis within a study.
      parameters:
        - $ref: '#/components/parameters/nested'
    put:
      summary: PUT/update an analysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis-return'
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analysis-request'
      tags:
        - analyses
        - store
      description: Update an existing analysis.
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE an analysis
      responses:
        '200':
          description: OK
      description: delete an analysis
      security:
        - JSON-Web-Token: []
      tags:
        - analyses
        - store
  /points/:
    get:
      summary: Get Points
      tags:
        - points
        - store
      parameters:
        - $ref: '#/components/parameters/paginate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/point-list'
      description: list points in database
    post:
      summary: POST Points
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/point-return'
      tags:
        - points
        - store
      description: add a point to an analysis
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/point-request'
  '/points/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a point
      tags:
        - points
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/point-return'
              examples: {}
        '404':
          description: Not Found
      description: Information about a particular MRI coordinate
    put:
      summary: PUT/update a point
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/point-return'
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/point-request'
      tags:
        - points
        - store
      description: Update a particular MRI coordinate.
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE a point
      responses:
        '200':
          description: OK
      description: delete a point
      security:
        - JSON-Web-Token: []
      tags:
        - points
        - store
  /images/:
    get:
      summary: GET a list of images
      tags:
        - images
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-list'
      description: Retrieve and list images.
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/paginate'
        - $ref: '#/components/parameters/filename'
        - $ref: '#/components/parameters/analysis_name'
        - $ref: '#/components/parameters/value_type'
        - $ref: '#/components/parameters/space'
    post:
      summary: POST/create an image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-return'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image-request'
      tags:
        - images
        - store
      description: Create an image
      security:
        - JSON-Web-Token: []
  '/images/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET an image
      tags:
        - images
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-return'
        '404':
          $ref: '#/components/responses/404'
      description: Retrieve information about a particular image from an analysis.
    put:
      summary: PUT/update an image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/image-return'
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image-request'
        description: ''
      tags:
        - images
        - store
      description: Update a specific image.
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE an image
      responses:
        '200':
          description: OK
      description: delete an image
      security:
        - JSON-Web-Token: []
      tags:
        - images
        - store
  /conditions/:
    get:
      summary: GET Conditions
      tags:
        - conditions
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/condition-list'
      description: Get all conditions
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/paginate'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/description'
    post:
      summary: POST/Create a condition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/condition-return'
      description: Create a condition
      security:
        - JSON-Web-Token: []
      tags:
        - conditions
        - store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/condition-request'
  '/conditions/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET a condition
      tags:
        - conditions
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/condition-return'
        '404':
          $ref: '#/components/responses/404'
      description: 'Retrieve a condition (e.g., 2-back) that can be used in contrasts (e.g., 2-back - 1-back)'
    put:
      summary: PUT/update a condition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/condition-return'
        '422':
          $ref: '#/components/responses/422'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/condition-request'
        description: ''
      tags:
        - conditions
        - store
      description: update a condition
      security:
        - JSON-Web-Token: []
    delete:
      summary: DELETE a condition
      responses:
        '200':
          description: OK
      description: delete a condition
      security:
        - JSON-Web-Token: []
      tags:
        - conditions
        - store
  /annotations/:
    parameters: []
    get:
      summary: Your GET endpoint
      tags:
        - annotations
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-list'
      description: get annotations for an available studyset
      parameters:
        - $ref: '#/components/parameters/studyset_id'
        - $ref: '#/components/parameters/paginate'
    post:
      summary: Post Annotation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-return'
      description: Create an annotation
      security:
        - JSON-Web-Token: []
      tags:
        - annotations
        - store
      parameters:
        - $ref: '#/components/parameters/source'
        - $ref: '#/components/parameters/source_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/annotation-request'
  '/annotations/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - annotations
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-return'
      description: get an individual annotation
      parameters:
        - $ref: '#/components/parameters/export'
    put:
      summary: Update an annotation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-return'
      description: edit an existing annotation
      tags:
        - annotations
        - store
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/annotation-request'
    delete:
      summary: DELETE an annotation
      responses:
        '200':
          description: OK
      description: delete annotation
      security:
        - JSON-Web-Token: []
      tags:
        - annotations
        - store
  /users/:
    get:
      summary: Your GET endpoint
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-list'
      description: get list of users
      security:
        - JSON-Web-Token: []
    post:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: create a user
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      tags:
        - user
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Individual User Profile
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: get an individual user
    put:
      summary: Update Individual Profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
      description: update an individual user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      security:
        - JSON-Web-Token: []
      tags:
        - user
  /base-studies/:
    get:
      summary: ''
      tags:
        - studies
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/base-study-list'
      parameters:
        - name: year_min
          in: query
          description: Minimum publication year (inclusive) for study search
          required: false
          schema:
            type: integer
        - name: x
          in: query
          description: X coordinate for spatial query (requires y, z, and radius)
          required: false
          schema:
            type: number
            example: 10
        - name: y
          in: query
          description: Y coordinate for spatial query (requires x, z, and radius)
          required: false
          schema:
            type: number
            example: 20
        - name: z
          in: query
          description: Z coordinate for spatial query (requires x, y, and radius)
          required: false
          schema:
            type: number
            example: 30
        - name: radius
          in: query
          description: Radius for spatial query (requires x, y, and z)
          required: false
          schema:
            type: number
            example: 6
            example: 2000
        - name: year_max
          in: query
          description: Maximum publication year (inclusive) for study search
          required: false
          schema:
            type: integer
            example: 2020
        - name: feature_filter
          in: query
          description: >
            Filter studies by feature content. Format: "PipelineName[:version]:field_path=value".
            Examples:
              - "TestPipeline:1.0.0:predictions.age_mean>20" (specific version)
              - "TestPipeline:groups.diagnosis=ADHD" (latest version)
            
            Field path supports array notation with [], regex search with ~, and comparisons with =, >, <, >=, <=.
          required: false
          schema:
            type: array
            items:
              type: string
              example: 'TestPipeline:1.0.0:predictions.age_mean>20'
        - name: pipeline_config
          in: query
          description: >
            Filter studies by pipeline config content. Format: "PipelineName[:version]:config_path=value".
            Examples:
              - "TestPipeline:1.0.0:settings.min_age=20" (specific version)
              - "TestPipeline:model.type=linear" (latest version)
            
            Config path supports array notation with [], regex search with ~, and comparisons with =, >, <, >=, <=.
          required: false
          schema:
            type: array
            items:
              type: string
              example: 'TestPipeline:1.0.0:settings.min_age=20'
        - name: feature_display
          in: query
          description: display features from pipelines
          required: false
          schema:
            type: string
        - name: feature_flatten
          in: query
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/desc'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/description'
        - $ref: '#/components/parameters/authors'
        - $ref: '#/components/parameters/level'
        - $ref: '#/components/parameters/data_type'
        - $ref: '#/components/parameters/publication'
        - $ref: '#/components/parameters/pmid'
        - $ref: '#/components/parameters/doi'
        - $ref: '#/components/parameters/flat'
        - $ref: '#/components/parameters/info'
        - $ref: '#/components/parameters/paginate'
      security:
        - JSON-Web-Token: []
        - {}
    post:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/base-study-return'
                  - type: array
                    items:
                      $ref: '#/components/schemas/base-study-return'
      security:
        - JSON-Web-Token: []
        - {}
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/base-study'
                - type: array
                  x-stoplight:
                    id: ufcpin3lhrdgq
                  items:
                    $ref: '#/components/schemas/base-study'
      tags:
        - studies
        - store
  '/base-studies/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - studies
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/base-study-return'
      parameters:
        - $ref: '#/components/parameters/flat'
        - $ref: '#/components/parameters/info'
    put:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/base-study-return'
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/base-study'
      tags:
        - studies
        - store
  /annotation-analyses/:
    get:
      summary: Get annotation analyses
      tags:
        - analyses
        - annotations
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note-collection-list'
        2XX:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note-collection-list'
      parameters:
        - $ref: '#/components/parameters/paginate'
    post:
      summary: Your POST endpoint
      tags:
        - analyses
        - annotations
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/note-collection-return'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/note-collection-request'
      security:
        - JSON-Web-Token: []
      description: |-
        This endpoint does not allow for creation, only modification of existing annotation-analyses.
        If you wish to create an annotation-analysis, post to the annotations endpoint and/or add the analysis
        to the appropriate study in the studyset, and the annotation-analysis will be created automatically. 
  '/annotation-analyses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - analyses
        - store
        - annotations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note-collection-return'
      x-stoplight:
        id: 0bluiswi2nwdw
      security:
        - {}
        - JSON-Web-Token: []
    put:
      summary: Your PUT endpoint
      tags:
        - analyses
        - annotations
        - store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/note-collection-return'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/note-collection-request'
      security:
        - JSON-Web-Token: []
components:
  schemas:
    pipeline:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        version:
          type: string
        study_dependent:
          type: boolean
        ace_compatible:
          type: boolean
        pubget_compatible:
          type: boolean
        derived_from:
          type: string
          nullable: true
    pipeline-list:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/pipeline'
        metadata:
          $ref: '#/components/schemas/metadata'
    pipeline-config:
      type: object
      properties:
        id:
          type: string
        config:
          type: object
    pipeline-config-list:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/pipeline-config'
        metadata:
          $ref: '#/components/schemas/metadata'
    pipeline-study-result:
      type: object
      properties:
        id:
          type: string
        pipeline_config_id:
          type: string
        data:
          type: object
    pipeline-study-result-list:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/pipeline-study-result'
        metadata:
          $ref: '#/components/schemas/metadata'
    studyset-return:
      title: studyset-return
      x-examples: {}
      x-tags:
        - studyset
      allOf:
        - $ref: ./nimads/nimads/studysetBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/clone'
        - $ref: '#/components/schemas/studyset-return-relationships'
        - $ref: '#/components/schemas/study-common'
          x-stoplight:
            id: y17p9ubfmmpgg
    studyset-request:
      title: studyset-request
      x-examples: {}
      x-tags:
        - studyset
      allOf:
        - $ref: ./nimads/nimads/studysetBase.yaml
        - $ref: '#/components/schemas/studyset-request-relationships'
        - $ref: '#/components/schemas/writeable-resource-attributes'
        - $ref: '#/components/schemas/study-common'
          x-stoplight:
            id: zlm0t5muprjr3
    studyset-return-relationships:
      title: studyset-relationships
      type: object
      properties:
        studies:
          oneOf:
            - items:
                $ref: '#/components/schemas/study-return'
              type: array
              minItems: 1
            - items:
                type: string
              type: array
    studyset-request-relationships:
      title: studyset-relationships
      type: object
      properties:
        studies:
          type: array
          items: {}
    studyset-list:
      title: studyset-get
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/studyset-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - studyset
    study-return:
      title: study-return
      allOf:
        - $ref: ./nimads/nimads/studyBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/clone'
        - $ref: '#/components/schemas/study-return-relationships'
        - type: object
          properties:
            studysets:
              type: array
              items:
                oneOf:
                  - type: object
                    properties:
                      name:
                        type: string
                        nullable: true
                      id:
                        type: string
                      description:
                        type: string
                        nullable: true
                  - type: string
                    x-stoplight:
                      id: 4ny274ofy8y83
                    nullable: true
            has_coordinates:
              type: boolean
              x-stoplight:
                id: z0t5y3n3t9w6p
            has_images:
              type: boolean
              x-stoplight:
                id: 5awd3fw7bz8sw
            base_study:
              type: string
              x-stoplight:
                id: kpfdf217fjdv5
              nullable: true
            pmcid:
              type: string
              x-stoplight:
                id: n475is2n6hps6
              nullable: true
      x-tags:
        - study
    study-request:
      title: study-request
      allOf:
        - $ref: ./nimads/nimads/studyBase.yaml
        - $ref: '#/components/schemas/study-request-relationships'
        - $ref: '#/components/schemas/writeable-resource-attributes'
        - type: object
          x-stoplight:
            id: w8fkbttl422ip
          properties:
            pmcid:
              type: string
              x-stoplight:
                id: 5urg0rcomxc92
              nullable: true
      x-tags:
        - study
    study-return-relationships:
      title: study-relationships
      x-tags:
        - study
      type: object
      properties:
        analyses:
          oneOf:
            - items:
                $ref: '#/components/schemas/analysis-return'
              minItems: 1
              type: array
            - items:
                type: string
              type: array
    study-request-relationships:
      title: study-relationships
      x-tags:
        - study
      type: object
      properties:
        analyses:
          oneOf:
            - items:
                $ref: '#/components/schemas/analysis-request'
              minItems: 1
              type: array
            - items:
                type: string
              type: array
    study-list:
      title: study-get
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/study-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - study
    analysis-common:
      title: analysis-common
      description: attributes common between request and return objects
      type: object
      properties:
        study:
          type: string
        entities:
          type: array
          x-stoplight:
            id: 7ou6xrem7bwps
          items:
            $ref: '#/components/schemas/entity'
        order:
          type: integer
          x-stoplight:
            id: vo5cd2gerhxve
          nullable: true
        metadata:
          type: object
          x-stoplight:
            id: wibxycovy2j3g
          nullable: true
    analysis-return:
      title: analysis-return
      allOf:
        - $ref: ./nimads/nimads/analysisBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/analysis-return-relationships'
        - $ref: '#/components/schemas/analysis-common'
      x-tags:
        - analysis
    analysis-request:
      title: analysis-request
      allOf:
        - $ref: ./nimads/nimads/analysisBase.yaml
        - $ref: '#/components/schemas/analysis-request-relationships'
        - $ref: '#/components/schemas/writeable-resource-attributes'
        - $ref: '#/components/schemas/analysis-common'
      x-tags:
        - analysis
    analysis-return-relationships:
      title: analysis-relationships
      x-tags:
        - analysis
      type: object
      properties:
        study:
          type: string
        images:
          oneOf:
            - items:
                $ref: '#/components/schemas/image-return'
              minItems: 1
              type: array
            - items:
                type: string
              type: array
        points:
          oneOf:
            - items:
                $ref: '#/components/schemas/point-return'
              minItems: 1
              type: array
            - items:
                type: string
              type: array
        conditions:
          oneOf:
            - items:
                $ref: '#/components/schemas/condition-return'
              minItems: 1
              type: array
            - items:
                type: string
              type: array
    analysis-request-relationships:
      title: analysis-relationships
      x-tags:
        - analysis
      type: object
      properties:
        study:
          type: string
        images:
          oneOf:
            - items:
                $ref: '#/components/schemas/image-request'
              minItems: 1
              type: array
            - items:
                type: string
              type: array
        points:
          oneOf:
            - items:
                $ref: '#/components/schemas/point-request'
              minItems: 1
              type: array
            - items:
                type: string
              type: array
        conditions:
          oneOf:
            - items:
                $ref: '#/components/schemas/condition-request'
              minItems: 1
            - items:
                type: string
              type: array
    analysis-list:
      title: analysis-list
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/metadata'
        results:
          type: array
          items:
            $ref: '#/components/schemas/analysis-return'
      x-tags:
        - analysis
    point-common:
      title: point-common
      type: object
      properties:
        analysis:
          type: string
        cluster_size:
          type: number
          x-stoplight:
            id: 77svy0irqsgvb
          description: size of the cluster in cubic millimeters
          nullable: true
        subpeak:
          type: boolean
          x-stoplight:
            id: 5klqsds10ziod
          description: whether the reported peak is the max-peak statistic or a sub-maxmimal peak.
          nullable: true
        deactivation:
          type: boolean
          description: wheather the coordinate represents an decrease in activation relative to a baseline
          nullable: true
        order:
          type: integer
          x-stoplight:
            id: 1dx1iw1wt2huo
          description: determines the row to display the coordinate
          nullable: true
    point-return:
      allOf:
        - $ref: ./nimads/nimads/pointBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/point-relationships'
        - $ref: '#/components/schemas/point-common'
      x-tags:
        - point
    point-request:
      allOf:
        - $ref: ./nimads/nimads/pointBase.yaml
        - $ref: '#/components/schemas/point-relationships'
        - $ref: '#/components/schemas/writeable-resource-attributes'
        - $ref: '#/components/schemas/point-common'
      x-tags:
        - point
    point-relationships:
      x-tags:
        - point
      type: object
      properties:
        image:
          type: string
          nullable: true
        values:
          oneOf:
            - items:
                $ref: '#/components/schemas/point-value'
              type: array
              minItems: 1
            - nullable: true
              items:
                x-stoplight:
                  id: 6wlgfi0s2zefg
                type: string
                nullable: true
              type: array
          x-stoplight:
            id: 7ywg6qu86o7yy
        x:
          type: number
          writeOnly: true
        'y':
          type: number
          writeOnly: true
        z:
          type: number
          writeOnly: true
        entities:
          type: array
          items:
            $ref: '#/components/schemas/entity'
    point-list:
      title: point-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/point-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - point
    point-value:
      title: point-value
      type: object
      properties:
        kind:
          type: string
          nullable: true
        value:
          type: number
          nullable: true
      description: ''
      x-tags:
        - point
    image-common:
      title: image-common
      type: object
      properties:
        analysis:
          type: string
    image-return:
      allOf:
        - $ref: ./nimads/nimads/imageBase.yaml
        - $ref: '#/components/schemas/image-relationships'
        - $ref: '#/components/schemas/resource-attributes'
        - $ref: '#/components/schemas/image-common'
      x-tags:
        - image
    image-request:
      allOf:
        - $ref: ./nimads/nimads/imageBase.yaml
        - $ref: '#/components/schemas/image-relationships'
        - $ref: '#/components/schemas/writeable-resource-attributes'
        - $ref: '#/components/schemas/image-common'
      x-tags:
        - image
    image-relationships:
      x-tags:
        - image
      type: object
      properties:
        analysis:
          type: string
        entities:
          type: array
          items:
            $ref: '#/components/schemas/entity'
        analysis_name:
          type: string
          nullable: true
      title: ''
    image-list:
      title: image-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/image-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - image
    condition-return:
      title: condition-return
      allOf:
        - $ref: ./nimads/nimads/conditionBase.yaml
        - $ref: '#/components/schemas/resource-attributes'
      x-tags:
        - condition
    condition-request:
      title: condition-request
      allOf:
        - $ref: ./nimads/nimads/conditionBase.yaml
        - $ref: '#/components/schemas/writeable-resource-attributes'
      x-tags:
        - condition
    condition-list:
      title: condition-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/condition-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - condition
    annotation-return:
      title: annotation-return
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/annotation-export'
            - {}
        - allOf:
            - $ref: ./nimads/nimads/annotationBase.yaml
            - $ref: '#/components/schemas/resource-attributes'
            - $ref: '#/components/schemas/clone'
            - $ref: '#/components/schemas/annotation-return-relationships'
            - $ref: '#/components/schemas/annotation-common'
      x-tags:
        - annotation
    annotation-request:
      title: annotation-request
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/annotation-export'
            - {}
        - allOf:
            - $ref: ./nimads/nimads/annotationBase.yaml
            - $ref: '#/components/schemas/annotation-request-relationships'
            - $ref: '#/components/schemas/writeable-resource-attributes'
            - $ref: '#/components/schemas/annotation-common'
      x-tags:
        - annotation
    annotation-return-relationships:
      title: annotation-relationships
      x-tags:
        - annotation
      type: object
      properties:
        notes:
          oneOf:
            - items:
                $ref: '#/components/schemas/note-collection-return'
              type: array
              minItems: 1
            - items:
                type: string
              type: array
    annotation-request-relationships:
      title: annotation-relationships
      x-tags:
        - annotation
      type: object
      properties:
        notes:
          oneOf:
            - items:
                $ref: '#/components/schemas/note-collection-request'
              minItems: 1
              type: array
            - items:
                type: string
              type: array
    annotation-list:
      title: annotation-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/annotation-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - annotation
    note-collection-return:
      title: note-collection-return
      allOf:
        - $ref: ./nimads/nimads/noteCollectionBase.yaml
        - type: object
          properties:
            analysis:
              type: string
              readOnly: true
            analysis_name:
              type: string
              nullable: true
              readOnly: true
            study:
              type: string
              readOnly: true
            study_name:
              type: string
              nullable: true
              readOnly: true
            annotation:
              type: string
              readOnly: true
            study_year:
              type: integer
              nullable: true
              readOnly: true
            publication:
              type: string
              nullable: true
              readOnly: true
            authors:
              type: string
              nullable: true
              readOnly: true
            id:
              type: string
              x-stoplight:
                id: kcqkjm938r62j
    note-collection-request:
      title: note-collection-request
      allOf:
        - $ref: ./nimads/nimads/noteCollectionBase.yaml
        - $ref: '#/components/schemas/writeable-resource-attributes'
    note-collection-list:
      title: note-collection-list
      x-stoplight:
        id: mljd0u645zvaz
      type: object
      properties:
        results:
          type: array
          x-stoplight:
            id: 30s5atr6axd6n
          items:
            $ref: '#/components/schemas/note-collection-return'
        metadata:
          $ref: '#/components/schemas/metadata'
    annotation-export:
      type: object
      title: annotation-export
      additionalProperties: false
      x-tags:
        - annotation
      description: exporting an annotation as a CSV for easier editing
      properties:
        metadata:
          type: object
          nullable: true
          readOnly: true
        annotation_csv:
          type: string
          description: annotation object expressed as a CSV
      required:
        - annotation_csv
    annotation-common:
      title: annotation-common
      type: object
      properties:
        studyset:
          type: string
    user:
      type: object
      title: user
      description: ''
      properties:
        name:
          type: string
          description: full name of user
        neuroid:
          type: string
      x-tags:
        - user
    user-list:
      title: user-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/user'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - user
    metadata:
      type: object
      title: metadata
      description: data included in every list response
      additionalProperties: false
      x-internal: true
      x-tags:
        - support
      properties:
        total_count:
          type: integer
          description: |
            total number of entries
          readOnly: true
        unique_count:
          type: integer
          description: count of elements for unique entries
          readOnly: true
    resource-attributes:
      allOf:
        - $ref: '#/components/schemas/readable-resource-attributes'
        - $ref: '#/components/schemas/writeable-resource-attributes'
          required:
            - id
        - $ref: '#/components/schemas/user-resource-attributes'
          required:
            - user
        - readOnly: true
      description: common attributes for user owned resources
    userless-resource-attributes:
      allOf:
        - $ref: '#/components/schemas/readable-resource-attributes'
          required:
            - created_at
            - updated_at
        - $ref: '#/components/schemas/writeable-resource-attributes'
          required:
            - id
        - readOnly: true
      description: common resource attributes not tied to a specific user
    user-resource-attributes:
      title: user-resource-attributes
      type: object
      description: common resource attributes
      x-internal: true
      x-tags:
        - support
      properties:
        user:
          type: string
          description: who owns the resource
          nullable: true
          readOnly: true
        username:
          type: string
          x-stoplight:
            id: xatmqtz3yy1eg
          description: human readable username
          nullable: true
    readable-resource-attributes:
      title: readable-resource-attributes
      type: object
      description: common readable resource attributes
      x-internal: true
      x-tags:
        - support
      properties:
        created_at:
          type: string
          format: date-time
          example: '2021-01-16T20:50:38.009318+00:00'
          description: time the resource was created on the database
          readOnly: true
        updated_at:
          type: string
          description: when the resource was last modified/updated.
          nullable: true
          readOnly: true
    writeable-resource-attributes:
      title: writeable-resource-attributes
      type: object
      description: common resource attributes
      x-internal: true
      x-tags:
        - support
      properties:
        id:
          type: string
          description: short UUID specifying the location of this resource
          example: 38jobTomPDqt
          minLength: 12
          maxLength: 30
        public:
          type: boolean
          default: true
          description: whether the resource is listed in public searches or not
    json-ld:
      title: json-ld
      type: object
      description: JSON-LD elements for data tracking
      properties:
        '@context':
          type: object
          description: Context for the shorthand names
          properties:
            '@vocab':
              type: string
              description: common URI prefix for @type
              format: uri
        '@id':
          type: string
          format: uri
          description: URI of the resource
        '@type':
          type: string
          description: One of the NiMADS data types
          example: Study
      x-internal: true
      x-tags:
        - support
    entity:
      title: entity
      description: 'WARNING: not currently used. descriptor of level of analysis for a particular image/point (run, session, subject, group, meta)'
      type: object
      properties:
        label:
          type: string
          x-stoplight:
            id: f12wushemxy2x
          nullable: true
        level:
          type: string
          x-stoplight:
            id: eb4zy1dh61x9t
          nullable: true
        analysis:
          type: string
          x-stoplight:
            id: s064lv0pqh9km
          nullable: true
    clone:
      title: clone
      type: object
      properties:
        source:
          type: string
          nullable: true
        source_id:
          type: string
          nullable: true
        source_updated_at:
          type: string
          nullable: true
          readOnly: true
    nested-put-attributes:
      type: object
      title: nested-put-attributes
      properties:
        id:
          type: string
      writeOnly: true
    study-common:
      title: study-common
      x-stoplight:
        id: qufxwmzs9ihnf
      type: object
      properties:
        level:
          type: string
          x-stoplight:
            id: oygujzdxh8h8q
          enum:
            - group
            - meta
    base-study:
      title: base-study
      x-stoplight:
        id: dk84wnkoshpxb
      type: object
      properties:
        metadata:
          type: object
          x-stoplight:
            id: at2s31cv9gfg5
          nullable: true
        versions:
          x-stoplight:
            id: rqz03bl5z81y4
          oneOf:
            - items:
                x-stoplight:
                  id: nesbtmu3fl2yy
                type: string
                minItems: 1
              type: array
            - x-stoplight:
                id: vdove859ce553
              items:
                $ref: '#/components/schemas/study-return'
              type: array
        name:
          type: string
          x-stoplight:
            id: zl1wex53acatp
          nullable: true
        description:
          type: string
          x-stoplight:
            id: thag7ji2rhr83
          nullable: true
        publication:
          type: string
          x-stoplight:
            id: ph412w2el6ebi
          nullable: true
        doi:
          type: string
          x-stoplight:
            id: pstkzdb6m745f
          nullable: true
        pmid:
          type: string
          x-stoplight:
            id: 0m392ko74gh43
          nullable: true
        authors:
          type: string
          x-stoplight:
            id: 6tz6016l564pj
          nullable: true
        year:
          type: integer
          x-stoplight:
            id: gdrb1hjvs1m68
          nullable: true
        level:
          type: string
          x-stoplight:
            id: voxamooj7ob5l
          nullable: true
        pmcid:
          type: string
          x-stoplight:
            id: s29tro516g5zs
          nullable: true
    base-study-return:
      title: base-study-return
      x-stoplight:
        id: wjlatdng999oq
      allOf:
        - $ref: '#/components/schemas/base-study'
        - $ref: '#/components/schemas/resource-attributes'
      properties:
        features:
          type: object
    base-study-list:
      title: base-study-list
      x-stoplight:
        id: mhmsku38rqcfq
      type: object
      properties:
        results:
          type: array
          x-stoplight:
            id: 8txl0ha4pe7y0
          items:
            $ref: '#/components/schemas/base-study-return'
        metadata:
          $ref: '#/components/schemas/metadata'
  responses:
    '404':
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: '"The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again."'
              status:
                type: integer
                enum:
                  - 404
              title:
                type: string
                example: '"Not Found"'
              type:
                type: string
                example: '"about:blank"'
    '422':
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: The request was well-formed but was unable to be followed due to semantic errors.
              status:
                type: integer
              title:
                type: string
                example: Unprocessable Entity
              type:
                type: string
                example: 'about:blank'
  parameters:
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
        minLength: 1
        example: imagin
      description: search for entries that contain the substring
    sort:
      name: sort
      in: query
      required: false
      schema:
        type: string
        default: created_at
      description: Parameter to sort results on
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
      description: page of results
    desc:
      name: desc
      in: query
      required: false
      schema:
        type: boolean
      description: sort results by descending order (as opposed to ascending order)
    page_size:
      name: page_size
      in: query
      required: false
      schema:
        type: integer
        maximum: 30000
        exclusiveMaximum: true
        minimum: 1
        format: int32
      description: number of results to show on a page
    nested:
      name: nested
      in: query
      required: false
      schema:
        type: boolean
      description: whether to show the URI to a resource (false) or to embed the object in the response (true)
    source:
      name: source
      in: query
      required: false
      schema:
        type: string
        example: neurostore
        default: neurostore
        enum:
          - neurostore
          - neurovault
          - pubmed
          - neurosynth
          - neuroquery
          - pubget
      description: the source of the resource you would like to filter/copy from
    source_id:
      name: source_id
      in: query
      schema:
        type: string
        example: 1234567890ab
      description: id of the resource you are either filtering/copying on
    name:
      name: name
      in: query
      required: false
      schema:
        type: string
      description: search the name field for a term
    description:
      name: description
      in: query
      required: false
      schema:
        type: string
      description: search description field for a term
    filename:
      name: filename
      in: query
      required: false
      schema:
        type: string
      description: search filename field
    space:
      name: space
      in: query
      schema:
        type: string
      description: search space field
    value_type:
      name: value_type
      in: query
      required: false
      schema:
        type: string
      description: search value_type field
    analysis_name:
      name: analysis_name
      in: query
      required: false
      schema:
        type: string
      description: search analysis_name field
    unique:
      name: unique
      in: query
      required: false
      schema: {}
      description: whether to list clones with originals
    authors:
      name: authors
      in: query
      required: false
      schema:
        type: string
      description: search authors
    user_id:
      name: user_id
      in: query
      required: false
      schema:
        type: string
      description: user id you want to filter by
    studyset_id:
      name: studyset_id
      in: query
      required: false
      schema:
        type: string
      description: see all annotations connected to this studyset
    export:
      name: export
      in: query
      required: false
      schema:
        type: boolean
      description: return endpoint data in consumable/readable format
    data_type:
      name: data_type
      in: query
      required: false
      schema:
        type: string
        enum:
          - coordinate
          - image
          - both
      description: 'whether searching for studies that contain coordinates, images, or both'
    studyset_owner:
      name: studyset_owner
      in: query
      required: false
      schema:
        type: string
      description: for all studies filter which studysets are listed based on who owns the studyset
    level:
      name: level
      in: query
      schema:
        type: string
        enum:
          - group
          - meta
        default: group
      description: select between studies with group results or meta results
    publication:
      name: publication
      in: query
      required: false
      schema:
        type: string
      description: search for papers from a particular journal
    pmid:
      name: pmid
      in: query
      required: false
      schema:
        type: string
      description: search for particular pmid
    doi:
      name: doi
      in: query
      required: false
      schema:
        type: string
      description: search for study with specific doi
    flat:
      name: flat
      in: query
      required: false
      schema:
        type: boolean
      description: 'do not return any embedded relationships. When set, it is incompatible with nested. '
    info:
      name: info
      in: query
      required: false
      schema:
        type: boolean
      description: show additional for endpoint-object relationships without being fully nested. Incompatible with nested
    gzip:
      name: gzip
      in: query
      required: false
      schema:
        type: boolean
      description: return the content as gzipped content
    paginate:
      name: paginate
      in: query
      required: false
      schema:
        type: boolean
        default: true
      description: whether to paginate results (true) or return all results at once (false)
  securitySchemes:
    JSON-Web-Token:
      type: http
      scheme: bearer
      description: authentication method
tags:
  - name: analyses
  - name: studysets
  - name: images
  - name: points
  - name: store
  - name: studies
  - name: conditions
  - name: user
  - name: annotations
