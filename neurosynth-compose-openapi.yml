openapi: 3.0.0
info:
  title: Analysis Specification for Meta-analysis
  version: '1.0'
  description: api to create a meta-analysis specification
  contact:
    name: James D Kent
    url: 'https://github.com/jdkent'
    email: jamesdkent21@gmail.com
servers:
  - url: 'http://localhost:81/api'
    description: testing
  - description: staging
    url: 'https://synth.neurostore.org/api'
  - url: 'https://compose.neurosynth.org/api'
    description: production
paths:
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get User Info by User ID
      tags:
        - user
      description: Retrieve the information of the user with the matching user ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-return'
    put:
      summary: Update User Information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-return'
      tags:
        - user
      description: update information about a user
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
  /users:
    parameters: []
    get:
      summary: GET list of Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-list'
      description: List all users
      tags:
        - user
    post:
      summary: Create A New User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-return'
      security:
        - JSON-Web-Token: []
      tags:
        - user
      description: create a single user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
  /meta-analyses:
    get:
      summary: GET a list of meta-analyses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meta-analysis-list'
        '400':
          $ref: '#/components/responses/bad-request'
      description: 'list all runnable specification, studyset, annotation bundles'
      parameters:
        - $ref: '#/components/parameters/nested'
      tags:
        - meta-analysis
    parameters: []
    post:
      summary: Create a new meta-analysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meta-analysis-return'
        '400':
          $ref: '#/components/responses/bad-request'
        '422':
          $ref: '#/components/responses/bad-request'
        '500':
          $ref: '#/components/responses/bad-request'
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meta-analysis-post-body'
      description: 'create a new specification, studyset, annotation bundle'
      tags:
        - meta-analysis
  '/meta-analyses/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET meta-analysis information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meta-analysis-return'
        '401':
          $ref: '#/components/responses/bad-request'
        '404':
          $ref: '#/components/responses/bad-request'
      description: 'get a meta-analysis (specification, annotation, and studyset)'
      parameters:
        - $ref: '#/components/parameters/nested'
      tags:
        - meta-analysis
    put:
      summary: Update a meta-analysis
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meta-analysis-return'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/bad-request'
        '404':
          $ref: '#/components/responses/bad-request'
        '422':
          $ref: '#/components/responses/bad-request'
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meta-analysis'
        description: ''
      description: update an existing meta-analysis (that has not yet been run)
      tags:
        - meta-analysis
  /studysets:
    get:
      summary: Get a list of Studysets
      tags:
        - studyset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-list'
        '400':
          $ref: '#/components/responses/bad-request'
      description: get a list of serialized/referenced studysets
    parameters: []
    post:
      summary: Create a new Studyset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-return'
        '400':
          $ref: '#/components/responses/bad-request'
        '422':
          $ref: '#/components/responses/bad-request'
        '500':
          $ref: '#/components/responses/bad-request'
      tags:
        - studyset
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studyset-post-body'
      description: create a new serialized/referenced studyset
  '/studysets/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get information about a Studyset
      tags:
        - studyset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-return'
        '401':
          $ref: '#/components/responses/bad-request'
        '404':
          $ref: '#/components/responses/bad-request'
      description: get a single serialized/referenced studyset
    put:
      summary: Update a Studyset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studyset-return'
        '400':
          description: Bad Request
        '401':
          $ref: '#/components/responses/bad-request'
        '404':
          $ref: '#/components/responses/bad-request'
        '422':
          $ref: '#/components/responses/bad-request'
      tags:
        - studyset
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studyset'
      description: update an existing serialized/referenced studyset
  /annotations:
    get:
      summary: GET a list of annotations
      tags:
        - annotation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-list'
        '400':
          $ref: '#/components/responses/bad-request'
      description: get a list of serialized/referenced annotations
    post:
      summary: Create a new Annotation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-return'
        '400':
          $ref: '#/components/responses/bad-request'
        '422':
          $ref: '#/components/responses/bad-request'
        '500':
          $ref: '#/components/responses/bad-request'
      tags:
        - annotation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/annotation-post-body'
      security:
        - JSON-Web-Token: []
      description: create a new serialized/referenced annotation
  '/annotations/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET information about an annotation
      tags:
        - annotation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-return'
        '401':
          $ref: '#/components/responses/bad-request'
        '404':
          $ref: '#/components/responses/bad-request'
      description: get a single annotation
    put:
      summary: Update an Annotation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/annotation-return'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/bad-request'
        '404':
          $ref: '#/components/responses/bad-request'
        '422':
          $ref: '#/components/responses/bad-request'
      tags:
        - annotation
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/annotation-update'
      description: update an existing annotation
  /specifications:
    get:
      summary: Get a list of Specifications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/specification-list'
        '400':
          $ref: '#/components/responses/bad-request'
      description: list of meta-analysis specifications
      tags:
        - specification
    parameters: []
    post:
      summary: Create a Specification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/specification-return'
        '400':
          $ref: '#/components/responses/bad-request'
        '422':
          description: Unprocessable Entity (WebDAV)
        '500':
          $ref: '#/components/responses/bad-request'
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/specification-post-body'
      description: create a new meta-analysis specification
      tags:
        - specification
  '/specifications/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get information about a Specification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/specification-return'
        '401':
          $ref: '#/components/responses/bad-request'
        '404':
          $ref: '#/components/responses/bad-request'
      description: get a meta-analysis specification
      tags:
        - specification
    put:
      summary: Update Meta-Analysis specification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/specification-return'
        '400':
          $ref: '#/components/responses/bad-request'
        '401':
          $ref: '#/components/responses/bad-request'
        '404':
          $ref: '#/components/responses/bad-request'
        '422':
          $ref: '#/components/responses/bad-request'
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/specification'
      description: update an existing meta analysis specification
      tags:
        - specification
  /results:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result-list'
      parameters:
        - schema:
            type: string
          in: query
          name: meta_analysis_id
          description: search for results with this meta-analysis id
    post:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result-return'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/result'
      security:
        - JSON-Web-Token: []
  '/results/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result-return'
    put:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result-return'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/result'
  /neurovault-collections:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
    post:
      summary: ''
      responses:
        '200':
          description: OK
      description: ''
      security:
        - JSON-Web-Token: []
    parameters: []
  '/neurovault-collections/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/neurovault-collection-return'
    put:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/neurovault-collection-return'
      security:
        - JSON-Web-Token: []
  /neurovault-files:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/neurovault-file-list'
    post:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/neurovault-file-return'
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/neurovault-file'
        description: ''
    parameters: []
  '/neurovault-files/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/neurovault-file-return'
    put:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/neurovault-file-return'
      security:
        - JSON-Web-Token: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/neurovault-file'
components:
  schemas:
    specification:
      title: specification
      type: object
      x-tags:
        - specification
      description: a machine readable specification of how to run a meta-analysis (currently specifically tailored to NiMARE).
      properties:
        type:
          type: string
          description: 'the type of meta-analysis being run, typically either cbma or ibma, but others may become available in the future.'
        estimator:
          $ref: '#/components/schemas/estimator'
        mask:
          type: string
          description: a string representing a binary nifti file to select which voxels a user wants to include in the analysis.
          nullable: true
        contrast:
          type: string
          description: 'underspecified selection of columns to contrast (TODO, make better).'
          nullable: true
        transformer:
          type: string
          description: 'A transformation applied to column(s) (e.g., binarize based on a threshold). This is likely to become deprecated.'
          nullable: true
        corrector:
          $ref: '#/components/schemas/corrector'
        filter:
          type: string
          description: a boolean column from annotations selecting which analyses to include in the meta-analysis
          nullable: true
    estimator:
      title: estimator
      type: object
      properties:
        type:
          type: string
          description: 'the meta-analytic algorithm applied to the data. Currently this should be directly tied to the function/class running the meta-analysis. For example, ALE, or MKDADensity are valid NiMARE classes to put here.'
          example: MKDADensity
          minLength: 1
        args:
          type: object
          description: 'arbitrary keyword arguments to be passed into the function/class to modify default functionality, this could modify the kernel, resampling methods, or any other behavior defined in the function/class (like MKDADensity).'
      description: the specification for the function/class running the meta-analysis
      x-tags:
        - specification
    corrector:
      title: corrector
      type: object
      description: The function/class applying statistical adjustments to the output of the meta-analysis (optional).
      nullable: true
      properties:
        type:
          type: string
          description: the name of the function/class performing the correction. For example FWECorrector from NiMARE would be valid.
          example: FWECorrector
          minLength: 1
        args:
          type: object
          description: 'key word arguments passed to the corrector to modidy default functionality, such as number of iterations, or the particular method of correction being applied.'
      x-tags:
        - specification
    meta-analysis:
      title: meta-analysis
      type: object
      description: 'The combination of the specification determining what meta-analysis to run (required), the studyset to act as input to the meta-analytic algorithm (required), and the annotation to provide human readable annotations as well as acts as an optional filter on which analyses to select within the studyset (optional, but suggested).'
      x-tags:
        - meta-analysis
      properties:
        specification:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/specification'
          description: Either a string representation of the id of the specification (nested=False) or a JSON representation of the specification itself (nested=True).
        studyset:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/studyset'
          description: Either a string representation of the id of the studyset (nested=False) or a JSON representation of the studyset itself (nested=True).
          readOnly: true
        annotation:
          oneOf:
            - type: string
              nullable: true
            - $ref: '#/components/schemas/annotation'
          description: Either a string representation of the id of the annotation (nested=False) or a JSON representation of the annotation itself (nested=True).
          readOnly: true
        name:
          type: string
          description: Human-readable name of the meta-analysis.
          nullable: true
        description:
          type: string
          description: Long form description of the meta-analysis.
          nullable: true
        internal_studyset_id:
          type: string
          description: The id of the studyset on neurosynth-compose (as opposed to the id of the studyset on neurostore). Multiple snapshots of the studyset can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.
          writeOnly: true
        internal_annotation_id:
          type: string
          description: The id of the annotation on neurosynth-compose (as opposed to the id of the annotation on neurostore). Multiple snapshots of the annotation can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.
          writeOnly: true
        results:
          type: array
          description: 'array of neurostore ids representing the results of this meta-analysis (nominally all results should be the same, but machine architecture differences/algorithm stochastic-ness may lead to slightly different outcomes for each result.'
          items:
            type: string
            minLength: 12
            maxLength: 12
    annotation:
      title: annotation
      type: object
      x-tags:
        - annotation
      description: a holder/reference to the annotation on neurostore
      properties:
        neurostore_id:
          type: string
          description: the id of the annotation on neurostore
        snapshot:
          type: object
          description: the snapshot taken of the annotation pending a successful run of the meta-analytic algorithm
          nullable: true
        studyset:
          type: string
          description: The related studyset to this annotation.
          readOnly: true
    studyset:
      title: studyset
      type: object
      x-tags:
        - studyset
      properties:
        neurostore_id:
          type: string
          description: The id of the studyset on neurostore.
        snapshot:
          type: object
          description: The snapshot of the studyset pending a successful run of the meta-analysis.
          nullable: true
    user:
      title: user
      type: object
      properties:
        external_id:
          type: string
      description: attributes of the user object
      x-tags:
        - user
    read-only:
      title: read-only
      type: object
      properties:
        id:
          type: string
          description: the identifier for the resource.
        updated_at:
          type: string
          format: date-time
          description: when the resource was last modified.
          nullable: true
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: When the resource was created.
          readOnly: true
        user:
          type: string
          description: Who owns the resource.
          nullable: true
    specification-return:
      title: specification-return
      allOf:
        - $ref: '#/components/schemas/specification'
        - $ref: '#/components/schemas/read-only'
      description: The view of the specification through an endpoint.
      x-tags:
        - specification
    specification-list:
      title: specification-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/specification-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      description: The representation of a list of specifications.
      x-tags:
        - specification
    annotation-return:
      title: annotation-return
      allOf:
        - $ref: '#/components/schemas/annotation'
        - $ref: '#/components/schemas/read-only'
      x-tags:
        - annotation
    annotation-list:
      title: annotation-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/annotation-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - annotation
    studyset-return:
      title: studyset-return
      allOf:
        - $ref: '#/components/schemas/studyset'
        - $ref: '#/components/schemas/read-only'
      x-tags:
        - studyset
    studyset-list:
      title: studyset-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/studyset-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - studyset
    meta-analysis-return:
      title: meta-analysis-return
      allOf:
        - $ref: '#/components/schemas/meta-analysis'
        - $ref: '#/components/schemas/read-only'
      x-tags:
        - meta-analysis
    meta-analysis-list:
      title: meta-analysis-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/meta-analysis-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - meta-analysis
    user-return:
      title: user-return
      allOf:
        - $ref: '#/components/schemas/user'
        - $ref: '#/components/schemas/read-only'
      x-tags:
        - user
    user-list:
      title: user-list
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/user-return'
        metadata:
          $ref: '#/components/schemas/metadata'
      x-tags:
        - user
    metadata:
      title: metadata
      type: object
    annotation-update:
      title: annotation-post
      allOf:
        - type: object
          properties:
            internal_studyset_id:
              type: string
              writeOnly: true
        - $ref: '#/components/schemas/annotation'
      x-tags:
        - annotation
    specification-post-body:
      title: specification-post-body
      allOf:
        - $ref: '#/components/schemas/specification'
        - required:
            - type
            - estimator
      x-tags:
        - specification
    annotation-post-body:
      title: annotation-post-body
      allOf:
        - $ref: '#/components/schemas/annotation-update'
        - required:
            - internal_studyset_id
      x-tags:
        - annotation
    studyset-post-body:
      title: studyset-post-body
      allOf:
        - $ref: '#/components/schemas/studyset'
        - required:
            - neurostore_id
      x-tags:
        - studyset
    meta-analysis-post-body:
      title: meta-analysis-post-body
      allOf:
        - $ref: '#/components/schemas/meta-analysis'
        - required:
            - internal_annotation_id
            - internal_studyset_id
            - specification
      x-tags:
        - meta-analysis
    result:
      title: result
      x-stoplight:
        id: bu7w84za6m75g
      type: object
      description: describes the output of a meta-analysis
      properties:
        images:
          type: object
        meta_analysis_id:
          type: string
        cli_version:
          type: string
        estimator:
          type: string
        neurovault_collection_id:
          oneOf:
            - type: integer
              properties: {}
            - $ref: '#/components/schemas/neurovault-collection'
    result-return:
      title: result-return
      x-stoplight:
        id: 37rioayiuvw01
      allOf:
        - $ref: '#/components/schemas/result'
        - $ref: '#/components/schemas/read-only'
    result-list:
      title: result-list
      x-stoplight:
        id: 4ktdtuulnummw
      type: object
      properties:
        results:
          $ref: '#/components/schemas/result-return'
        metadata:
          $ref: '#/components/schemas/metadata'
    neurovault-collection:
      title: neurovault-collection
      x-stoplight:
        id: jezigu623umbv
      type: object
      properties:
        collection_id:
          type: string
          readOnly: true
        meta_analysis_id:
          type: string
        files:
          type: array
          items:
            oneOf:
              - {}
              - $ref: '#/components/schemas/neurovault-file'
            type: object
        result:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/result'
    neurovault-file:
      title: neurovault-file
      x-stoplight:
        id: kfys0q5bzuq3u
      type: object
      properties:
        collection_id:
          type: string
        path:
          type: string
        exception:
          type: string
        traceback:
          type: string
        status:
          type: string
        file:
          type: string
          format: byte
          writeOnly: true
        image_id:
          type: string
    neurovault-collection-return:
      title: neurovault-collection-return
      x-stoplight:
        id: 2bsw2vz8ye52t
      allOf:
        - $ref: '#/components/schemas/neurovault-collection'
        - $ref: '#/components/schemas/read-only'
    neurovault-list:
      title: neurovault-list
      x-stoplight:
        id: k5ezj2ga77zuk
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/neurovault-collection-return'
        metadata:
          $ref: '#/components/schemas/metadata'
    neurovault-file-return:
      title: neurovault-file-return
      x-stoplight:
        id: ewxeawtiwzwz7
      allOf:
        - $ref: '#/components/schemas/neurovault-file'
        - $ref: '#/components/schemas/read-only'
    neurovault-file-list:
      title: neurovault-file-list
      x-stoplight:
        id: 06gijla4dazsf
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/neurovault-file-return'
        metadata:
          $ref: '#/components/schemas/metadata'
  securitySchemes:
    JSON-Web-Token:
      type: http
      scheme: bearer
  parameters:
    nested:
      name: nested
      in: query
      required: false
      schema:
        type: boolean
      description: show nested component instead of id
  responses:
    bad-request:
      description: form when a request goes wrong
      content:
        application/problem+json:
          schema:
            type: object
            properties:
              detail:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
tags:
  - name: annotation
  - name: meta-analysis
  - name: specification
  - name: studyset
  - name: user
